{"ast":null,"code":"import _toConsumableArray from\"/Users/mac/Documents/GitHub/inner-web/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/Users/mac/Documents/GitHub/inner-web/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from'react';import{motion,useAnimation}from'framer-motion';import WORDS from'./Words';import{Easing}from'../general/Animation';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var KeyboardLetter=function KeyboardLetter(_ref){var letter=_ref.letter,guesses=_ref.guesses,word=_ref.word,currentGuess=_ref.currentGuess,setGuesses=_ref.setGuesses,setCurrentGuess=_ref.setCurrentGuess;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isInWord=_useState2[0],setIsInWord=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isInPlace=_useState4[0],setIsInPlace=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),notInWord=_useState6[0],setNotInWord=_useState6[1];useEffect(function(){guesses.forEach(function(guess){if(word.includes(letter)&&guess.includes(letter)){setIsInWord(true);if(word.indexOf(letter)===guess.indexOf(letter)){setIsInPlace(true);}}if(!word.includes(letter)&&guess.includes(letter)){setNotInWord(true);}});if(guesses.length===0){setIsInPlace(false);setIsInWord(false);setNotInWord(false);}},[guesses,letter,word]);var handleClick=function handleClick(){if(letter==='RET'){if(currentGuess.length===word.length){if(WORDS.includes(currentGuess.toLowerCase())){setGuesses([].concat(_toConsumableArray(guesses),[currentGuess]));setCurrentGuess('');}}}else if(letter==='DEL'){setCurrentGuess(currentGuess.slice(0,-1));}else if(currentGuess.length<word.length){setCurrentGuess(currentGuess+letter.toUpperCase());}};return/*#__PURE__*/_jsx(\"div\",{onMouseDown:handleClick,className:\"site-button\",style:Object.assign({},styles.letterBox,isInWord&&{backgroundColor:'yellow'},isInPlace&&{backgroundColor:'lightgreen'},notInWord&&{backgroundColor:'gray'}),children:/*#__PURE__*/_jsx(\"p\",{children:letter})});};var GuessLetter=function GuessLetter(_ref2){var guessed=_ref2.guessed,letter=_ref2.letter,guess=_ref2.guess,word=_ref2.word;var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),isInWord=_useState8[0],setIsInWord=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),isInPlace=_useState10[0],setIsInPlace=_useState10[1];useEffect(function(){if(guessed){if(word.includes(letter)){setIsInWord(true);if(word.indexOf(letter)===guess.indexOf(letter)){setIsInPlace(true);}}}},[guessed,guess,letter,word]);return/*#__PURE__*/_jsx(\"div\",{className:\"button-border\",style:Object.assign({},styles.guessLetterBox,isInWord&&{backgroundColor:'yellow'},isInPlace&&{backgroundColor:'lightgreen'},!guessed&&{backgroundColor:'white'},letter===' '&&styles.emptyBox),children:/*#__PURE__*/_jsx(\"h3\",{children:/*#__PURE__*/_jsx(\"b\",{children:letter.toUpperCase()})})});};var GuessWord=function GuessWord(_ref3){var guess=_ref3.guess,guesses=_ref3.guesses,word=_ref3.word,active=_ref3.active,noClear=_ref3.noClear;var _useState11=useState(guess),_useState12=_slicedToArray(_useState11,2),savedGuess=_useState12[0],setSavedGuess=_useState12[1];var controls=useAnimation();useEffect(function(){if(active){setSavedGuess(guess);if(guess.length===word.length&&!WORDS.includes(guess.toLowerCase())){controls.start({backgroundColor:'#f00',x:2,transition:{duration:0.1}}).then(function(){controls.start({x:-4,backgroundColor:'#fff',transition:{duration:0.1}}).then(function(){controls.start({x:0,backgroundColor:'#fff',transition:{duration:0.09}});});});}}},[guess,active,word,controls]);useEffect(function(){if(guesses.length===0&&!noClear)setSavedGuess('');},[guesses,noClear]);return/*#__PURE__*/_jsxs(motion.div,{animate:controls,style:styles.guessWordRow,children:[savedGuess.split('').map(function(letter,index){return/*#__PURE__*/_jsx(GuessLetter,{guessed:!active,letter:letter,guess:savedGuess,word:word},index);}),_toConsumableArray(Array(word.length-savedGuess.length)).map(function(e,i){return/*#__PURE__*/_jsx(GuessLetter,{guessed:!active,letter:' ',guess:savedGuess,word:word},i);})]});};var TOP_ROW=['Q','W','E','R','T','Y','U','I','O','P'];var MIDDLE_ROW=['A','S','D','F','G','H','J','K','L'];var BOTTOM_ROW=['RET','Z','X','C','V','B','N','M','DEL'];var ROWS=[TOP_ROW,MIDDLE_ROW,BOTTOM_ROW];var ALPHABET='ABCDEFGHIJKLMNOPQRSTUVWXYZ';var Wordle=function Wordle(){var word='ESSAM';var _useState13=useState([]),_useState14=_slicedToArray(_useState13,2),guesses=_useState14[0],setGuesses=_useState14[1];var _useState15=useState(false),_useState16=_slicedToArray(_useState15,2),gameOver=_useState16[0],setGameOver=_useState16[1];var _useState17=useState(false),_useState18=_slicedToArray(_useState17,2),won=_useState18[0],setWon=_useState18[1];var _useState19=useState(''),_useState20=_slicedToArray(_useState19,2),currentGuess=_useState20[0],setCurrentGuess=_useState20[1];var restart=function restart(){setGuesses([]);setGameOver(false);setTimeout(function(){setWon(false);},500);setCurrentGuess('');};// listen to keyboard events\nuseEffect(function(){var handleKeyDown=function handleKeyDown(event){if(event.key==='Backspace'){setCurrentGuess(currentGuess.slice(0,-1));}else if(event.key==='Enter'){if(currentGuess.length===word.length){if(WORDS.includes(currentGuess.toLowerCase())){setGuesses([].concat(_toConsumableArray(guesses),[currentGuess]));setCurrentGuess('');}}}else if(event.key.length===1&&ALPHABET.includes(event.key.toUpperCase())){if(currentGuess.length<word.length){setCurrentGuess(currentGuess+event.key.toUpperCase());}}};// add listener\nwindow.addEventListener('keydown',handleKeyDown);// cleanup listener\nreturn function(){window.removeEventListener('keydown',handleKeyDown);};},[guesses,currentGuess]);useEffect(function(){if(guesses.length===6){setGameOver(true);}guesses.forEach(function(guess){if(guess===word){setGameOver(true);setWon(true);}});},[guesses]);return/*#__PURE__*/_jsxs(\"div\",{style:styles.container,children:[/*#__PURE__*/_jsxs(\"div\",{style:styles.header,children:[/*#__PURE__*/_jsx(\"h2\",{children:\"esordle\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Wordle but with an ESSAM based twist.\"})]}),/*#__PURE__*/_jsxs(motion.div,{variants:gameOverAnimations,animate:gameOver?'show':'hidden',initial:false,style:Object.assign({},styles.gameOverContainer,gameOver&&{zIndex:1000}),children:[/*#__PURE__*/_jsx(\"h2\",{children:won?'You win!':'Game Over'}),/*#__PURE__*/_jsx(\"p\",{children:\"Thanks for playing! Remember: the word is always \\\"ESSAM\\\"!\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(GuessWord,{guess:word,word:word,guesses:guesses,active:false,noClear:true},'winning-guess'),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"div\",{className:\"site-button\",onMouseDown:restart,children:\"Restart Game\"})]}),/*#__PURE__*/_jsxs(motion.div,{variants:gameAnimations,animate:!gameOver?'show':'hidden',initial:false,style:styles.gameContainer,children:[/*#__PURE__*/_jsx(\"div\",{style:styles.playArea,children:_toConsumableArray(Array(6)).map(function(e,i){return/*#__PURE__*/_jsx(GuessWord,{guess:currentGuess,word:word,guesses:guesses,active:i===guesses.length},i);})}),/*#__PURE__*/_jsx(\"div\",{style:styles.keyboardContainer,children:ROWS.map(function(row){return/*#__PURE__*/_jsx(\"div\",{style:styles.keyboardRow,children:row.map(function(letter){return/*#__PURE__*/_jsx(KeyboardLetter,{word:word,setGuesses:setGuesses,guesses:guesses,letter:letter,currentGuess:currentGuess,setCurrentGuess:setCurrentGuess},letter);})},\"row-\".concat(row[0]));})})]})]});};var gameAnimations={hidden:{opacity:0,y:-12,transition:{duration:0.5}},show:{y:0,opacity:1,transition:{delay:0.5,duration:0.5}}};var gameOverAnimations={hidden:{opacity:0,y:32,transition:{duration:0.5}},show:{opacity:1,y:0,transition:{delay:0.4,duration:0.5,ease:Easing.expOut}}};var styles={container:{flex:1,flexDirection:'column',overflowY:'scroll'},gameContainer:{flex:1,flexDirection:'column'},gameOverContainer:{zIndex:-1000,textAlign:'center',width:'100%',height:'100%',position:'absolute',flexDirection:'column',justifyContent:'center',alignItems:'center',backgroundColor:'#fff'},header:{flexShrink:1,paddingTop:32,flexDirection:'column',justifyContent:'center',alignItems:'center'},keyboardContainer:{flexShrink:1,paddingBottom:24,flexDirection:'column',justifyContent:'center',alignItems:'center'},playArea:{flex:1,flexDirection:'column',justifyContent:'center',alignItems:'center',marginTop:16,marginBottom:16},letterBox:{padding:12,paddingTop:16,minWidth:42,justifyContent:'center',alignItems:'center',paddingBottom:16,margin:4},keyboardRow:{},guessLetterBox:{width:60,height:60,justifyContent:'center',alignItems:'center',margin:4},guessWordRow:{},emptyBox:{border:'2px solid gray',backgroundColor:'white',boxShadow:'none'}};export default Wordle;","map":{"version":3,"sources":["/Users/mac/Documents/GitHub/inner-web/src/components/wordle/Wordle.tsx"],"names":["React","useEffect","useState","motion","useAnimation","WORDS","Easing","KeyboardLetter","letter","guesses","word","currentGuess","setGuesses","setCurrentGuess","isInWord","setIsInWord","isInPlace","setIsInPlace","notInWord","setNotInWord","forEach","guess","includes","indexOf","length","handleClick","toLowerCase","slice","toUpperCase","Object","assign","styles","letterBox","backgroundColor","GuessLetter","guessed","guessLetterBox","emptyBox","GuessWord","active","noClear","savedGuess","setSavedGuess","controls","start","x","transition","duration","then","guessWordRow","split","map","index","Array","e","i","TOP_ROW","MIDDLE_ROW","BOTTOM_ROW","ROWS","ALPHABET","Wordle","gameOver","setGameOver","won","setWon","restart","setTimeout","handleKeyDown","event","key","window","addEventListener","removeEventListener","container","header","gameOverAnimations","gameOverContainer","zIndex","gameAnimations","gameContainer","playArea","keyboardContainer","row","keyboardRow","hidden","opacity","y","show","delay","ease","expOut","flex","flexDirection","overflowY","textAlign","width","height","position","justifyContent","alignItems","flexShrink","paddingTop","paddingBottom","marginTop","marginBottom","padding","minWidth","margin","border","boxShadow"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { motion, useAnimation } from 'framer-motion';\nimport WORDS from './Words';\nimport { Easing } from '../general/Animation';\n\nexport interface KeyboardLetterProps {\n    letter: string;\n    word: string;\n    guesses: string[];\n    currentGuess: string;\n    setGuesses: React.Dispatch<React.SetStateAction<string[]>>;\n    setCurrentGuess: React.Dispatch<React.SetStateAction<string>>;\n}\n\nconst KeyboardLetter: React.FC<KeyboardLetterProps> = ({\n    letter,\n    guesses,\n    word,\n    currentGuess,\n    setGuesses,\n    setCurrentGuess,\n}) => {\n    const [isInWord, setIsInWord] = useState(false);\n    const [isInPlace, setIsInPlace] = useState(false);\n    const [notInWord, setNotInWord] = useState(false);\n\n    useEffect(() => {\n        guesses.forEach((guess) => {\n            if (word.includes(letter) && guess.includes(letter)) {\n                setIsInWord(true);\n                if (word.indexOf(letter) === guess.indexOf(letter)) {\n                    setIsInPlace(true);\n                }\n            }\n            if (!word.includes(letter) && guess.includes(letter)) {\n                setNotInWord(true);\n            }\n        });\n        if (guesses.length === 0) {\n            setIsInPlace(false);\n            setIsInWord(false);\n            setNotInWord(false);\n        }\n    }, [guesses, letter, word]);\n\n    const handleClick = () => {\n        if (letter === 'RET') {\n            if (currentGuess.length === word.length) {\n                if (WORDS.includes(currentGuess.toLowerCase())) {\n                    setGuesses([...guesses, currentGuess]);\n                    setCurrentGuess('');\n                }\n            }\n        } else if (letter === 'DEL') {\n            setCurrentGuess(currentGuess.slice(0, -1));\n        } else if (currentGuess.length < word.length) {\n            setCurrentGuess(currentGuess + letter.toUpperCase());\n        }\n    };\n\n    return (\n        <div\n            onMouseDown={handleClick}\n            className=\"site-button\"\n            style={Object.assign(\n                {},\n                styles.letterBox,\n                isInWord && { backgroundColor: 'yellow' },\n                isInPlace && { backgroundColor: 'lightgreen' },\n                notInWord && { backgroundColor: 'gray' }\n            )}\n        >\n            <p>{letter}</p>\n        </div>\n    );\n};\n\nexport interface GuessLetterProps {\n    letter: string;\n    word: string;\n    guess: string;\n    guessed: boolean;\n}\n\nconst GuessLetter: React.FC<GuessLetterProps> = ({\n    guessed,\n    letter,\n    guess,\n    word,\n}) => {\n    const [isInWord, setIsInWord] = useState(false);\n    const [isInPlace, setIsInPlace] = useState(false);\n\n    useEffect(() => {\n        if (guessed) {\n            if (word.includes(letter)) {\n                setIsInWord(true);\n                if (word.indexOf(letter) === guess.indexOf(letter)) {\n                    setIsInPlace(true);\n                }\n            }\n        }\n    }, [guessed, guess, letter, word]);\n\n    return (\n        <div\n            className=\"button-border\"\n            style={Object.assign(\n                {},\n                styles.guessLetterBox,\n                isInWord && { backgroundColor: 'yellow' },\n                isInPlace && { backgroundColor: 'lightgreen' },\n                !guessed && { backgroundColor: 'white' },\n                letter === ' ' && styles.emptyBox\n            )}\n        >\n            <h3>\n                <b>{letter.toUpperCase()}</b>\n            </h3>\n        </div>\n    );\n};\n\nexport interface GuessWordProps {\n    guess: string;\n    guesses: string[];\n    word: string;\n    active: boolean;\n    noClear?: boolean;\n}\n\nconst GuessWord: React.FC<GuessWordProps> = ({\n    guess,\n    guesses,\n    word,\n    active,\n    noClear,\n}) => {\n    const [savedGuess, setSavedGuess] = useState(guess);\n    const controls = useAnimation();\n\n    useEffect(() => {\n        if (active) {\n            setSavedGuess(guess);\n            if (\n                guess.length === word.length &&\n                !WORDS.includes(guess.toLowerCase())\n            ) {\n                controls\n                    .start({\n                        backgroundColor: '#f00',\n                        x: 2,\n                        transition: {\n                            duration: 0.1,\n                        },\n                    })\n                    .then(() => {\n                        controls\n                            .start({\n                                x: -4,\n                                backgroundColor: '#fff',\n                                transition: {\n                                    duration: 0.1,\n                                },\n                            })\n                            .then(() => {\n                                controls.start({\n                                    x: 0,\n                                    backgroundColor: '#fff',\n                                    transition: {\n                                        duration: 0.09,\n                                    },\n                                });\n                            });\n                    });\n            }\n        }\n    }, [guess, active, word, controls]);\n\n    useEffect(() => {\n        if (guesses.length === 0 && !noClear) setSavedGuess('');\n    }, [guesses, noClear]);\n\n    return (\n        <motion.div animate={controls} style={styles.guessWordRow}>\n            {savedGuess.split('').map((letter, index) => (\n                <GuessLetter\n                    guessed={!active}\n                    key={index}\n                    letter={letter}\n                    guess={savedGuess}\n                    word={word}\n                />\n            ))}\n            {[...Array(word.length - savedGuess.length)].map((e, i) => (\n                <GuessLetter\n                    guessed={!active}\n                    key={i}\n                    letter={' '}\n                    guess={savedGuess}\n                    word={word}\n                />\n            ))}\n        </motion.div>\n    );\n};\n\nexport interface WordleProps {}\n\nconst TOP_ROW = ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'];\nconst MIDDLE_ROW = ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'];\nconst BOTTOM_ROW = ['RET', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', 'DEL'];\nconst ROWS = [TOP_ROW, MIDDLE_ROW, BOTTOM_ROW];\nconst ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\nconst Wordle: React.FC<WordleProps> = () => {\n    const word = 'ESSAM';\n    const [guesses, setGuesses] = useState<string[]>([]);\n    const [gameOver, setGameOver] = useState(false);\n    const [won, setWon] = useState(false);\n    const [currentGuess, setCurrentGuess] = useState('');\n\n    const restart = () => {\n        setGuesses([]);\n        setGameOver(false);\n        setTimeout(() => {\n            setWon(false);\n        }, 500);\n        setCurrentGuess('');\n    };\n\n    // listen to keyboard events\n    useEffect(() => {\n        const handleKeyDown = (event: KeyboardEvent) => {\n            if (event.key === 'Backspace') {\n                setCurrentGuess(currentGuess.slice(0, -1));\n            } else if (event.key === 'Enter') {\n                if (currentGuess.length === word.length) {\n                    if (WORDS.includes(currentGuess.toLowerCase())) {\n                        setGuesses([...guesses, currentGuess]);\n                        setCurrentGuess('');\n                    }\n                }\n            } else if (\n                event.key.length === 1 &&\n                ALPHABET.includes(event.key.toUpperCase())\n            ) {\n                if (currentGuess.length < word.length) {\n                    setCurrentGuess(currentGuess + event.key.toUpperCase());\n                }\n            }\n        };\n        // add listener\n        window.addEventListener('keydown', handleKeyDown);\n        // cleanup listener\n        return () => {\n            window.removeEventListener('keydown', handleKeyDown);\n        };\n    }, [guesses, currentGuess]);\n\n    useEffect(() => {\n        if (guesses.length === 6) {\n            setGameOver(true);\n        }\n        guesses.forEach((guess) => {\n            if (guess === word) {\n                setGameOver(true);\n                setWon(true);\n            }\n        });\n    }, [guesses]);\n\n    return (\n        <div style={styles.container}>\n            <div style={styles.header}>\n                <h2>esordle</h2>\n                <p>Wordle but with an ESSAM based twist.</p>\n            </div>\n            <motion.div\n                variants={gameOverAnimations}\n                animate={gameOver ? 'show' : 'hidden'}\n                initial={false}\n                style={Object.assign(\n                    {},\n                    styles.gameOverContainer,\n                    gameOver && { zIndex: 1000 }\n                )}\n            >\n                <h2>{won ? 'You win!' : 'Game Over'}</h2>\n                <p>Thanks for playing! Remember: the word is always \"ESSAM\"!</p>\n                <br />\n                <GuessWord\n                    key={'winning-guess'}\n                    guess={word}\n                    word={word}\n                    guesses={guesses}\n                    active={false}\n                    noClear={true}\n                />\n                <br />\n                <div className=\"site-button\" onMouseDown={restart}>\n                    Restart Game\n                </div>\n            </motion.div>\n            <motion.div\n                variants={gameAnimations}\n                animate={!gameOver ? 'show' : 'hidden'}\n                initial={false}\n                style={styles.gameContainer}\n            >\n                <div style={styles.playArea}>\n                    {[...Array(6)].map((e, i) => (\n                        <GuessWord\n                            key={i}\n                            guess={currentGuess}\n                            word={word}\n                            guesses={guesses}\n                            active={i === guesses.length}\n                        />\n                    ))}\n                </div>\n                <div style={styles.keyboardContainer}>\n                    {ROWS.map((row) => (\n                        <div style={styles.keyboardRow} key={`row-${row[0]}`}>\n                            {row.map((letter) => (\n                                <KeyboardLetter\n                                    key={letter}\n                                    word={word}\n                                    setGuesses={setGuesses}\n                                    guesses={guesses}\n                                    letter={letter}\n                                    currentGuess={currentGuess}\n                                    setCurrentGuess={setCurrentGuess}\n                                />\n                            ))}\n                        </div>\n                    ))}\n                </div>\n            </motion.div>\n        </div>\n    );\n};\n\nconst gameAnimations = {\n    hidden: {\n        opacity: 0,\n        y: -12,\n        transition: {\n            duration: 0.5,\n        },\n    },\n    show: {\n        y: 0,\n        opacity: 1,\n        transition: {\n            delay: 0.5,\n            duration: 0.5,\n        },\n    },\n};\n\nconst gameOverAnimations = {\n    hidden: {\n        opacity: 0,\n        y: 32,\n        transition: {\n            duration: 0.5,\n        },\n    },\n    show: {\n        opacity: 1,\n        y: 0,\n        transition: {\n            delay: 0.4,\n            duration: 0.5,\n            ease: Easing.expOut,\n        },\n    },\n};\n\nconst styles: StyleSheetCSS = {\n    container: {\n        flex: 1,\n        flexDirection: 'column',\n        overflowY: 'scroll',\n    },\n    gameContainer: {\n        flex: 1,\n        flexDirection: 'column',\n    },\n    gameOverContainer: {\n        zIndex: -1000,\n        textAlign: 'center',\n        width: '100%',\n        height: '100%',\n        position: 'absolute',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: '#fff',\n    },\n    header: {\n        flexShrink: 1,\n        paddingTop: 32,\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    keyboardContainer: {\n        flexShrink: 1,\n\n        paddingBottom: 24,\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    playArea: {\n        flex: 1,\n        flexDirection: 'column',\n\n        justifyContent: 'center',\n        alignItems: 'center',\n        marginTop: 16,\n        marginBottom: 16,\n    },\n    letterBox: {\n        padding: 12,\n        paddingTop: 16,\n        minWidth: 42,\n\n        justifyContent: 'center',\n        alignItems: 'center',\n        paddingBottom: 16,\n        margin: 4,\n    },\n    keyboardRow: {},\n    guessLetterBox: {\n        width: 60,\n        height: 60,\n        justifyContent: 'center',\n        alignItems: 'center',\n\n        margin: 4,\n    },\n    guessWordRow: {},\n    emptyBox: {\n        border: '2px solid gray',\n        backgroundColor: 'white',\n        boxShadow: 'none',\n    },\n};\n\nexport default Wordle;\n"]},"metadata":{},"sourceType":"module"}