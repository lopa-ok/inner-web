{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/GitHub/inner-web/src/components/applications/Game2048.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Window from '../os/Window';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SIZE = 4;\n\nconst getInitialGrid = () => {\n  const grid = Array(SIZE).fill(null).map(() => Array(SIZE).fill(0));\n  addRandomTile(grid);\n  addRandomTile(grid);\n  return grid;\n};\n\nconst addRandomTile = grid => {\n  const emptyTiles = [];\n\n  for (let i = 0; i < SIZE; i++) {\n    for (let j = 0; j < SIZE; j++) {\n      if (grid[i][j] === 0) {\n        emptyTiles.push({\n          x: i,\n          y: j\n        });\n      }\n    }\n  }\n\n  if (emptyTiles.length > 0) {\n    const {\n      x,\n      y\n    } = emptyTiles[Math.floor(Math.random() * emptyTiles.length)];\n    grid[x][y] = Math.random() < 0.9 ? 2 : 4;\n  }\n};\n\nconst moveLeft = grid => {\n  let moved = false;\n\n  for (let i = 0; i < SIZE; i++) {\n    let row = grid[i].filter(val => val);\n    let newRow = [];\n\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === row[j + 1]) {\n        newRow.push(row[j] * 2);\n        j++;\n        moved = true;\n      } else {\n        newRow.push(row[j]);\n      }\n    }\n\n    while (newRow.length < SIZE) {\n      newRow.push(0);\n    }\n\n    if (newRow.join('') !== grid[i].join('')) {\n      moved = true;\n    }\n\n    grid[i] = newRow;\n  }\n\n  return moved;\n};\n\nconst rotateGrid = grid => {\n  const newGrid = Array(SIZE).fill(null).map(() => Array(SIZE).fill(0));\n\n  for (let i = 0; i < SIZE; i++) {\n    for (let j = 0; j < SIZE; j++) {\n      newGrid[j][SIZE - 1 - i] = grid[i][j];\n    }\n  }\n\n  return newGrid;\n};\n\nconst getTileColor = value => {\n  switch (value) {\n    case 2:\n      return '#eee4da';\n\n    case 4:\n      return '#ede0c8';\n\n    case 8:\n      return '#f2b179';\n\n    case 16:\n      return '#f59563';\n\n    case 32:\n      return '#f67c5f';\n\n    case 64:\n      return '#f65e3b';\n\n    case 128:\n      return '#edcf72';\n\n    case 256:\n      return '#edcc61';\n\n    case 512:\n      return '#edc850';\n\n    case 1024:\n      return '#edc53f';\n\n    case 2048:\n      return '#edc22e';\n\n    default:\n      return '#cdc1b4';\n  }\n};\n\nconst Game2048 = _ref => {\n  _s();\n\n  let {\n    onInteract,\n    onMinimize,\n    onClose\n  } = _ref;\n  const [grid, setGrid] = useState(getInitialGrid);\n  const [gameOver, setGameOver] = useState(false);\n  const [movingTiles, setMovingTiles] = useState({});\n\n  const handleKeyDown = event => {\n    if (gameOver) return;\n    let moved = false;\n    let newGrid = [...grid];\n    const newMovingTiles = {};\n\n    switch (event.key) {\n      case 'ArrowLeft':\n        moved = moveLeft(newGrid);\n        break;\n\n      case 'ArrowRight':\n        newGrid = rotateGrid(rotateGrid(newGrid));\n        moved = moveLeft(newGrid);\n        newGrid = rotateGrid(rotateGrid(newGrid));\n        break;\n\n      case 'ArrowUp':\n        newGrid = rotateGrid(rotateGrid(rotateGrid(newGrid)));\n        moved = moveLeft(newGrid);\n        newGrid = rotateGrid(newGrid);\n        break;\n\n      case 'ArrowDown':\n        newGrid = rotateGrid(newGrid);\n        moved = moveLeft(newGrid);\n        newGrid = rotateGrid(rotateGrid(rotateGrid(newGrid)));\n        break;\n\n      default:\n        break;\n    }\n\n    if (moved) {\n      addRandomTile(newGrid);\n      setGrid(newGrid);\n      setMovingTiles(newMovingTiles);\n\n      if (!canMove(newGrid)) {\n        setGameOver(true);\n      }\n    }\n  };\n\n  const canMove = grid => {\n    for (let i = 0; i < SIZE; i++) {\n      for (let j = 0; j < SIZE; j++) {\n        if (grid[i][j] === 0) return true;\n        if (i < SIZE - 1 && grid[i][j] === grid[i + 1][j]) return true;\n        if (j < SIZE - 1 && grid[i][j] === grid[i][j + 1]) return true;\n      }\n    }\n\n    return false;\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [grid, gameOver]);\n\n  const restartGame = () => {\n    setGrid(getInitialGrid());\n    setGameOver(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Window, {\n    onInteract: onInteract,\n    minimizeWindow: onMinimize,\n    closeWindow: onClose,\n    windowTitle: \"2048\",\n    width: 500,\n    height: 500,\n    top: 50,\n    left: 50,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.header,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"2048\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Join the numbers and get to the 2048 tile!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.gameOverOverlay,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Game Over\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: restartGame,\n          children: \"Restart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.grid,\n        children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.row,\n          children: row.map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.cell,\n            children: cell !== 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              style: { ...styles.tile,\n                backgroundColor: getTileColor(cell),\n                transition: movingTiles[`${rowIndex}-${cellIndex}`] ? 'transform 0.2s' : 'none'\n              },\n              children: cell\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 41\n            }, this)\n          }, cellIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 33\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Game2048, \"KbLDPoU33fNtiOCOfHMK2I5eyjk=\");\n\n_c = Game2048;\nconst styles = {\n  container: {\n    position: 'relative',\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#faf8ef',\n    padding: 10,\n    boxSizing: 'border-box',\n    fontFamily: 'Courier New, monospace'\n  },\n  header: {\n    flexShrink: 1,\n    paddingTop: 32,\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  grid: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: 10,\n    backgroundColor: '#bbada0',\n    padding: 10,\n    borderRadius: 5,\n    width: '100%',\n    maxWidth: 400,\n    height: '100%',\n    maxHeight: 400,\n    boxSizing: 'border-box',\n    border: '2px solid #000'\n  },\n  row: {\n    display: 'flex',\n    width: '100%',\n    gap: 10\n  },\n  cell: {\n    width: '100%',\n    height: 80,\n    backgroundColor: '#cdc1b4',\n    borderRadius: 5,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    border: '2px solid #000'\n  },\n  tile: {\n    width: '100%',\n    height: '100%',\n    backgroundColor: '#eee4da',\n    borderRadius: 5,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    fontSize: 24,\n    fontWeight: 'bold',\n    border: '2px solid #000'\n  },\n  gameOverOverlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    color: '#fff',\n    zIndex: 10,\n    fontFamily: 'Courier New, monospace'\n  }\n};\nexport default Game2048;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game2048\");","map":{"version":3,"sources":["/Users/mac/Documents/GitHub/inner-web/src/components/applications/Game2048.tsx"],"names":["React","useState","useEffect","Window","SIZE","getInitialGrid","grid","Array","fill","map","addRandomTile","emptyTiles","i","j","push","x","y","length","Math","floor","random","moveLeft","moved","row","filter","val","newRow","join","rotateGrid","newGrid","getTileColor","value","Game2048","onInteract","onMinimize","onClose","setGrid","gameOver","setGameOver","movingTiles","setMovingTiles","handleKeyDown","event","newMovingTiles","key","canMove","window","addEventListener","removeEventListener","restartGame","styles","container","header","gameOverOverlay","rowIndex","cell","cellIndex","tile","backgroundColor","transition","position","width","height","display","flexDirection","justifyContent","alignItems","padding","boxSizing","fontFamily","flexShrink","paddingTop","gap","borderRadius","maxWidth","maxHeight","border","fontSize","fontWeight","top","left","color","zIndex"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Window from '../os/Window';\n\ninterface WindowProps {\n    onInteract: () => void;\n    onMinimize: () => void;\n    onClose: () => void;\n}\n\nconst SIZE = 4;\n\nconst getInitialGrid = () => {\n    const grid = Array(SIZE).fill(null).map(() => Array(SIZE).fill(0));\n    addRandomTile(grid);\n    addRandomTile(grid);\n    return grid;\n};\n\nconst addRandomTile = (grid: number[][]) => {\n    const emptyTiles = [];\n    for (let i = 0; i < SIZE; i++) {\n        for (let j = 0; j < SIZE; j++) {\n            if (grid[i][j] === 0) {\n                emptyTiles.push({ x: i, y: j });\n            }\n        }\n    }\n    if (emptyTiles.length > 0) {\n        const { x, y } = emptyTiles[Math.floor(Math.random() * emptyTiles.length)];\n        grid[x][y] = Math.random() < 0.9 ? 2 : 4;\n    }\n};\n\nconst moveLeft = (grid: number[][]) => {\n    let moved = false;\n    for (let i = 0; i < SIZE; i++) {\n        let row = grid[i].filter(val => val);\n        let newRow = [];\n        for (let j = 0; j < row.length; j++) {\n            if (row[j] === row[j + 1]) {\n                newRow.push(row[j] * 2);\n                j++;\n                moved = true;\n            } else {\n                newRow.push(row[j]);\n            }\n        }\n        while (newRow.length < SIZE) {\n            newRow.push(0);\n        }\n        if (newRow.join('') !== grid[i].join('')) {\n            moved = true;\n        }\n        grid[i] = newRow;\n    }\n    return moved;\n};\n\nconst rotateGrid = (grid: number[][]) => {\n    const newGrid = Array(SIZE).fill(null).map(() => Array(SIZE).fill(0));\n    for (let i = 0; i < SIZE; i++) {\n        for (let j = 0; j < SIZE; j++) {\n            newGrid[j][SIZE - 1 - i] = grid[i][j];\n        }\n    }\n    return newGrid;\n};\n\nconst getTileColor = (value: number) => {\n    switch (value) {\n        case 2:\n            return '#eee4da';\n        case 4:\n            return '#ede0c8';\n        case 8:\n            return '#f2b179';\n        case 16:\n            return '#f59563';\n        case 32:\n            return '#f67c5f';\n        case 64:\n            return '#f65e3b';\n        case 128:\n            return '#edcf72';\n        case 256:\n            return '#edcc61';\n        case 512:\n            return '#edc850';\n        case 1024:\n            return '#edc53f';\n        case 2048:\n            return '#edc22e';\n        default:\n            return '#cdc1b4';\n    }\n};\n\nconst Game2048: React.FC<WindowProps> = ({ onInteract, onMinimize, onClose }) => {\n    const [grid, setGrid] = useState(getInitialGrid);\n    const [gameOver, setGameOver] = useState(false);\n    const [movingTiles, setMovingTiles] = useState<{ [key: string]: boolean }>({});\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n        if (gameOver) return;\n\n        let moved = false;\n        let newGrid = [...grid];\n        const newMovingTiles: { [key: string]: boolean } = {};\n\n        switch (event.key) {\n            case 'ArrowLeft':\n                moved = moveLeft(newGrid);\n                break;\n            case 'ArrowRight':\n                newGrid = rotateGrid(rotateGrid(newGrid));\n                moved = moveLeft(newGrid);\n                newGrid = rotateGrid(rotateGrid(newGrid));\n                break;\n            case 'ArrowUp':\n                newGrid = rotateGrid(rotateGrid(rotateGrid(newGrid)));\n                moved = moveLeft(newGrid);\n                newGrid = rotateGrid(newGrid);\n                break;\n            case 'ArrowDown':\n                newGrid = rotateGrid(newGrid);\n                moved = moveLeft(newGrid);\n                newGrid = rotateGrid(rotateGrid(rotateGrid(newGrid)));\n                break;\n            default:\n                break;\n        }\n\n        if (moved) {\n            addRandomTile(newGrid);\n            setGrid(newGrid);\n            setMovingTiles(newMovingTiles);\n            if (!canMove(newGrid)) {\n                setGameOver(true);\n            }\n        }\n    };\n\n    const canMove = (grid: number[][]) => {\n        for (let i = 0; i < SIZE; i++) {\n            for (let j = 0; j < SIZE; j++) {\n                if (grid[i][j] === 0) return true;\n                if (i < SIZE - 1 && grid[i][j] === grid[i + 1][j]) return true;\n                if (j < SIZE - 1 && grid[i][j] === grid[i][j + 1]) return true;\n            }\n        }\n        return false;\n    };\n\n    useEffect(() => {\n        window.addEventListener('keydown', handleKeyDown);\n        return () => {\n            window.removeEventListener('keydown', handleKeyDown);\n        };\n    }, [grid, gameOver]);\n\n    const restartGame = () => {\n        setGrid(getInitialGrid());\n        setGameOver(false);\n    };\n\n    return (\n        <Window\n            onInteract={onInteract}\n            minimizeWindow={onMinimize}\n            closeWindow={onClose}\n            windowTitle=\"2048\"\n            width={500}\n            height={500}\n            top={50}\n            left={50}\n        >\n            <div style={styles.container}>\n                <div style={styles.header}>\n                    <h2>2048</h2>\n                    <p>Join the numbers and get to the 2048 tile!</p>\n                </div>\n                {gameOver && (\n                    <div style={styles.gameOverOverlay}>\n                        <h2>Game Over</h2>\n                        <button onClick={restartGame}>Restart</button>\n                    </div>\n                )}\n                <div style={styles.grid}>\n                    {grid.map((row, rowIndex) => (\n                        <div key={rowIndex} style={styles.row}>\n                            {row.map((cell, cellIndex) => (\n                                <div key={cellIndex} style={styles.cell}>\n                                    {cell !== 0 && (\n                                        <div\n                                            style={{\n                                                ...styles.tile,\n                                                backgroundColor: getTileColor(cell),\n                                                transition: movingTiles[`${rowIndex}-${cellIndex}`] ? 'transform 0.2s' : 'none',\n                                            }}\n                                        >\n                                            {cell}\n                                        </div>\n                                    )}\n                                </div>\n                            ))}\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </Window>\n    );\n};\n\nconst styles: StyleSheetCSS = {\n    container: {\n        position: 'relative',\n        width: '100%',\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: '#faf8ef',\n        padding: 10,\n        boxSizing: 'border-box',\n        fontFamily: 'Courier New, monospace',\n    },\n    header: {\n        flexShrink: 1,\n        paddingTop: 32,\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    grid: {\n        display: 'flex',\n        flexDirection: 'column',\n        gap: 10,\n        backgroundColor: '#bbada0',\n        padding: 10,\n        borderRadius: 5,\n        width: '100%',\n        maxWidth: 400,\n        height: '100%',\n        maxHeight: 400,\n        boxSizing: 'border-box',\n        border: '2px solid #000',\n    },\n    row: {\n        display: 'flex',\n        width: '100%',\n        gap: 10,\n    },\n    cell: {\n        width: '100%',\n        height: 80,\n        backgroundColor: '#cdc1b4',\n        borderRadius: 5,\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        border: '2px solid #000',\n    },\n    tile: {\n        width: '100%',\n        height: '100%',\n        backgroundColor: '#eee4da',\n        borderRadius: 5,\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        fontSize: 24,\n        fontWeight: 'bold',\n        border: '2px solid #000',\n    },\n    gameOverOverlay: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        backgroundColor: 'rgba(0, 0, 0, 0.5)',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        color: '#fff',\n        zIndex: 10,\n        fontFamily: 'Courier New, monospace',\n    },\n};\n\nexport default Game2048;\n"]},"metadata":{},"sourceType":"module"}