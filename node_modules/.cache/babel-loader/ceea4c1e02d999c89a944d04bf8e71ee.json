{"ast":null,"code":"import { useBoolean } from '../useBoolean';\nimport { useCounter } from '../useCounter';\nimport { useInterval } from '../useInterval';\n\nfunction useCountdown(_ref) {\n  var seconds = _ref.seconds,\n      interval = _ref.interval,\n      isIncrement = _ref.isIncrement;\n\n  var _useCounter = useCounter(seconds),\n      count = _useCounter.count,\n      increment = _useCounter.increment,\n      decrement = _useCounter.decrement,\n      resetCounter = _useCounter.reset;\n\n  var _useBoolean = useBoolean(false),\n      running = _useBoolean.value,\n      start = _useBoolean.setTrue,\n      stop = _useBoolean.setFalse;\n\n  var reset = function reset() {\n    stop();\n    resetCounter();\n  };\n\n  useInterval(isIncrement ? increment : decrement, running ? interval : null);\n  return [count, {\n    start: start,\n    stop: stop,\n    reset: reset\n  }];\n}\n\nexport default useCountdown;","map":{"version":3,"mappings":"AACA,SAASA,UAAT,QAA2B,eAA3B;AAEA,SAASC,UAAT,QAA2B,eAA3B;AAEA,SAASC,WAAT,QAA4B,gBAA5B;;AAoBA,SAASC,YAAT,OAImB;AAAA,MAHjBC,OAGiB,QAHjBA,OAGiB;AAAA,MAFjBC,QAEiB,QAFjBA,QAEiB;AAAA,MADjBC,WACiB,QADjBA,WACiB;;AACjB,oBAKIL,UAAU,CAACG,OAAD,CALd;AAAA,MACEG,KADF,eACEA,KADF;AAAA,MAEEC,SAFF,eAEEA,SAFF;AAAA,MAGEC,SAHF,eAGEA,SAHF;AAAA,MAISC,YAJT,eAIEC,KAJF;;AAYA,oBAA2DX,UAAU,CAAC,KAAD,CAArE;AAAA,MAAeY,OAAf,eAAQC,KAAR;AAAA,MAAiCC,KAAjC,eAAwBC,OAAxB;AAAA,MAAkDC,IAAlD,eAAwCC,QAAxC;;AAKA,MAAMN,KAAK,GAAG,SAARA,KAAQ,GAAK;AACjBK,QAAI;AACJN,gBAAY;AACb,GAHD;;AAKAR,aAAW,CAACI,WAAW,GAAGE,SAAH,GAAeC,SAA3B,EAAsCG,OAAO,GAAGP,QAAH,GAAc,IAA3D,CAAX;AACA,SAAO,CAACE,KAAD,EAAQ;AAAEO,SAAK,EAALA,KAAF;AAASE,QAAI,EAAJA,IAAT;AAAeL,SAAK,EAALA;AAAf,GAAR,CAAP;AACD;;AAED,eAAeR,YAAf","names":["useBoolean","useCounter","useInterval","useCountdown","seconds","interval","isIncrement","count","increment","decrement","resetCounter","reset","running","value","start","setTrue","stop","setFalse"],"sources":["/Users/mac/Documents/GitHub/inner-web/node_modules/usehooks-ts/src/useCountdown/useCountdown.ts"],"sourcesContent":["// See: https://usehooks-ts.com/react-hook/use-boolean\nimport { useBoolean } from '../useBoolean'\n// See: https://usehooks-ts.com/react-hook/use-counter\nimport { useCounter } from '../useCounter'\n// See: https://usehooks-ts.com/react-hook/use-interval\nimport { useInterval } from '../useInterval'\n\ninterface UseCountdownType {\n  seconds: number\n  interval: number\n  isIncrement?: boolean\n}\ninterface CountdownHelpers {\n  start: () => void\n  stop: () => void\n  reset: () => void\n}\n\n/**\n *\n * @param seconds the countdown's number, generally time seconds\n * @param interval the countdown's interval, milliseconds\n * @param isIncrement determine the countdown is increment, otherwise is decrement\n * @returns\n */\nfunction useCountdown({\n  seconds,\n  interval,\n  isIncrement,\n}: UseCountdownType): [number, CountdownHelpers] {\n  const {\n    count,\n    increment,\n    decrement,\n    reset: resetCounter,\n  } = useCounter(seconds)\n  /**\n   * Note: used to control the useInterval\n   * running: If true, the interval is running\n   * start: Should set running true to trigger interval\n   * stop: Should set running false to remove interval\n   */\n  const { value: running, setTrue: start, setFalse: stop } = useBoolean(false)\n\n  /**\n   * Will set running false and reset the seconds to initial value\n   */\n  const reset = () => {\n    stop()\n    resetCounter()\n  }\n\n  useInterval(isIncrement ? increment : decrement, running ? interval : null)\n  return [count, { start, stop, reset }]\n}\n\nexport default useCountdown\n"]},"metadata":{},"sourceType":"module"}