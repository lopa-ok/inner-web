{"ast":null,"code":"import _slicedToArray from \"/Users/mac/Documents/GitHub/inner-web/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { useEventListener } from '../useEventListener';\n\nfunction useLocalStorage(key, initialValue) {\n  var readValue = useCallback(function () {\n    if (typeof window === 'undefined') {\n      return initialValue;\n    }\n\n    try {\n      var item = window.localStorage.getItem(key);\n      return item ? parseJSON(item) : initialValue;\n    } catch (error) {\n      console.warn(\"Error reading localStorage key \\u201C\".concat(key, \"\\u201D:\"), error);\n      return initialValue;\n    }\n  }, [initialValue, key]);\n\n  var _useState = useState(readValue),\n      _useState2 = _slicedToArray(_useState, 2),\n      storedValue = _useState2[0],\n      setStoredValue = _useState2[1];\n\n  var setValueRef = useRef();\n\n  setValueRef.current = function (value) {\n    if (typeof window == 'undefined') {\n      console.warn(\"Tried setting localStorage key \\u201C\".concat(key, \"\\u201D even though environment is not a client\"));\n    }\n\n    try {\n      var newValue = value instanceof Function ? value(storedValue) : value;\n      window.localStorage.setItem(key, JSON.stringify(newValue));\n      setStoredValue(newValue);\n      window.dispatchEvent(new Event('local-storage'));\n    } catch (error) {\n      console.warn(\"Error setting localStorage key \\u201C\".concat(key, \"\\u201D:\"), error);\n    }\n  };\n\n  var setValue = useCallback(function (value) {\n    var _setValueRef$current;\n\n    return (_setValueRef$current = setValueRef.current) === null || _setValueRef$current === void 0 ? void 0 : _setValueRef$current.call(setValueRef, value);\n  }, []);\n  useEffect(function () {\n    setStoredValue(readValue());\n  }, []);\n  var handleStorageChange = useCallback(function () {\n    setStoredValue(readValue());\n  }, [readValue]);\n  useEventListener('storage', handleStorageChange);\n  useEventListener('local-storage', handleStorageChange);\n  return [storedValue, setValue];\n}\n\nexport default useLocalStorage;\n\nfunction parseJSON(value) {\n  try {\n    return value === 'undefined' ? undefined : JSON.parse(value !== null && value !== void 0 ? value : '');\n  } catch (_unused) {\n    console.log('parsing error on', {\n      value: value\n    });\n    return undefined;\n  }\n}","map":{"version":3,"mappings":";AAAA,SAGEA,WAHF,EAIEC,SAJF,EAKEC,MALF,EAMEC,QANF,QAOO,OAPP;AAUA,SAASC,gBAAT,QAAiC,qBAAjC;;AAUA,SAASC,eAAT,CAA4BC,GAA5B,EAAyCC,YAAzC,EAAwD;AAGtD,MAAMC,SAAS,GAAGR,WAAW,CAAC,YAAQ;AAEpC,QAAI,OAAOS,MAAP,KAAkB,WAAtB,EAAmC;AACjC,aAAOF,YAAP;AACD;;AAED,QAAI;AACF,UAAMG,IAAI,GAAGD,MAAM,CAACE,YAAP,CAAoBC,OAApB,CAA4BN,GAA5B,CAAb;AACA,aAAOI,IAAI,GAAIG,SAAS,CAACH,IAAD,CAAb,GAA4BH,YAAvC;AACD,KAHD,CAGE,OAAOO,KAAP,EAAc;AACdC,aAAO,CAACC,IAAR,gDAAgDV,GAAhD,cAAyDQ,KAAzD;AACA,aAAOP,YAAP;AACD;AACF,GAb4B,EAa1B,CAACA,YAAD,EAAeD,GAAf,CAb0B,CAA7B;;AAiBA,kBAAsCH,QAAQ,CAAIK,SAAJ,CAA9C;AAAA;AAAA,MAAOS,WAAP;AAAA,MAAoBC,cAApB;;AAEA,MAAMC,WAAW,GAAGjB,MAAM,EAA1B;;AAEAiB,aAAW,CAACC,OAAZ,GAAsB,eAAK,EAAG;AAE5B,QAAI,OAAOX,MAAP,IAAiB,WAArB,EAAkC;AAChCM,aAAO,CAACC,IAAR,gDACqCV,GADrC;AAGD;;AAED,QAAI;AAEF,UAAMe,QAAQ,GAAGC,KAAK,YAAYC,QAAjB,GAA4BD,KAAK,CAACL,WAAD,CAAjC,GAAiDK,KAAlE;AAGAb,YAAM,CAACE,YAAP,CAAoBa,OAApB,CAA4BlB,GAA5B,EAAiCmB,IAAI,CAACC,SAAL,CAAeL,QAAf,CAAjC;AAGAH,oBAAc,CAACG,QAAD,CAAd;AAGAZ,YAAM,CAACkB,aAAP,CAAqB,IAAIC,KAAJ,CAAU,eAAV,CAArB;AACD,KAZD,CAYE,OAAOd,KAAP,EAAc;AACdC,aAAO,CAACC,IAAR,gDAAgDV,GAAhD,cAAyDQ,KAAzD;AACD;AACF,GAvBD;;AA2BA,MAAMe,QAAQ,GAAgB7B,WAAW,CACvC,eAAK;AAAA;;AAAA,mCAAImB,WAAW,CAACC,OAAhB,yDAAI,qCAAW,EAAWE,KAAX,CAAf;AAAA,GADkC,EAEvC,EAFuC,CAAzC;AAKArB,WAAS,CAAC,YAAK;AACbiB,kBAAc,CAACV,SAAS,EAAV,CAAd;AAED,GAHQ,EAGN,EAHM,CAAT;AAKA,MAAMsB,mBAAmB,GAAG9B,WAAW,CAAC,YAAK;AAC3CkB,kBAAc,CAACV,SAAS,EAAV,CAAd;AACD,GAFsC,EAEpC,CAACA,SAAD,CAFoC,CAAvC;AAKAJ,kBAAgB,CAAC,SAAD,EAAY0B,mBAAZ,CAAhB;AAIA1B,kBAAgB,CAAC,eAAD,EAAkB0B,mBAAlB,CAAhB;AAEA,SAAO,CAACb,WAAD,EAAcY,QAAd,CAAP;AACD;;AAED,eAAexB,eAAf;;AAGA,SAASQ,SAAT,CAAsBS,KAAtB,EAA0C;AACxC,MAAI;AACF,WAAOA,KAAK,KAAK,WAAV,GAAwBS,SAAxB,GAAoCN,IAAI,CAACO,KAAL,CAAWV,KAAX,aAAWA,KAAX,cAAWA,KAAX,GAAoB,EAApB,CAA3C;AACD,GAFD,CAEE,gBAAM;AACNP,WAAO,CAACkB,GAAR,CAAY,kBAAZ,EAAgC;AAAEX,WAAK,EAALA;AAAF,KAAhC;AACA,WAAOS,SAAP;AACD;AACF","names":["useCallback","useEffect","useRef","useState","useEventListener","useLocalStorage","key","initialValue","readValue","window","item","localStorage","getItem","parseJSON","error","console","warn","storedValue","setStoredValue","setValueRef","current","newValue","value","Function","setItem","JSON","stringify","dispatchEvent","Event","setValue","handleStorageChange","undefined","parse","log"],"sources":["/Users/mac/Documents/GitHub/inner-web/node_modules/usehooks-ts/src/useLocalStorage/useLocalStorage.ts"],"sourcesContent":["import {\n  Dispatch,\n  SetStateAction,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react'\n\n// See: https://usehooks-ts.com/react-hook/use-event-listener\nimport { useEventListener } from '../useEventListener'\n\ndeclare global {\n  interface WindowEventMap {\n    'local-storage': CustomEvent\n  }\n}\n\ntype SetValue<T> = Dispatch<SetStateAction<T>>\n\nfunction useLocalStorage<T>(key: string, initialValue: T): [T, SetValue<T>] {\n  // Get from local storage then\n  // parse stored json or return initialValue\n  const readValue = useCallback((): T => {\n    // Prevent build error \"window is undefined\" but keep keep working\n    if (typeof window === 'undefined') {\n      return initialValue\n    }\n\n    try {\n      const item = window.localStorage.getItem(key)\n      return item ? (parseJSON(item) as T) : initialValue\n    } catch (error) {\n      console.warn(`Error reading localStorage key “${key}”:`, error)\n      return initialValue\n    }\n  }, [initialValue, key])\n\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState<T>(readValue)\n\n  const setValueRef = useRef<SetValue<T>>()\n\n  setValueRef.current = value => {\n    // Prevent build error \"window is undefined\" but keeps working\n    if (typeof window == 'undefined') {\n      console.warn(\n        `Tried setting localStorage key “${key}” even though environment is not a client`,\n      )\n    }\n\n    try {\n      // Allow value to be a function so we have the same API as useState\n      const newValue = value instanceof Function ? value(storedValue) : value\n\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(newValue))\n\n      // Save state\n      setStoredValue(newValue)\n\n      // We dispatch a custom event so every useLocalStorage hook are notified\n      window.dispatchEvent(new Event('local-storage'))\n    } catch (error) {\n      console.warn(`Error setting localStorage key “${key}”:`, error)\n    }\n  }\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue: SetValue<T> = useCallback(\n    value => setValueRef.current?.(value),\n    [],\n  )\n\n  useEffect(() => {\n    setStoredValue(readValue())\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const handleStorageChange = useCallback(() => {\n    setStoredValue(readValue())\n  }, [readValue])\n\n  // this only works for other documents, not the current one\n  useEventListener('storage', handleStorageChange)\n\n  // this is a custom event, triggered in writeValueToLocalStorage\n  // See: useLocalStorage()\n  useEventListener('local-storage', handleStorageChange)\n\n  return [storedValue, setValue]\n}\n\nexport default useLocalStorage\n\n// A wrapper for \"JSON.parse()\"\" to support \"undefined\" value\nfunction parseJSON<T>(value: string | null): T | undefined {\n  try {\n    return value === 'undefined' ? undefined : JSON.parse(value ?? '')\n  } catch {\n    console.log('parsing error on', { value })\n    return undefined\n  }\n}\n"]},"metadata":{},"sourceType":"module"}