{"ast":null,"code":"import _slicedToArray from \"/Users/mac/Documents/GitHub/inner-web/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useLocalStorage } from '../useLocalStorage';\nimport { useMediaQuery } from '../useMediaQuery';\nimport { useUpdateEffect } from '../useUpdateEffect';\nvar COLOR_SCHEME_QUERY = '(prefers-color-scheme: dark)';\n\nfunction useDarkMode(defaultValue) {\n  var _ref;\n\n  var isDarkOS = useMediaQuery(COLOR_SCHEME_QUERY);\n\n  var _useLocalStorage = useLocalStorage('usehooks-ts-dark-mode', (_ref = defaultValue !== null && defaultValue !== void 0 ? defaultValue : isDarkOS) !== null && _ref !== void 0 ? _ref : false),\n      _useLocalStorage2 = _slicedToArray(_useLocalStorage, 2),\n      isDarkMode = _useLocalStorage2[0],\n      setDarkMode = _useLocalStorage2[1];\n\n  useUpdateEffect(function () {\n    setDarkMode(isDarkOS);\n  }, [isDarkOS]);\n  return {\n    isDarkMode: isDarkMode,\n    toggle: function toggle() {\n      return setDarkMode(function (prev) {\n        return !prev;\n      });\n    },\n    enable: function enable() {\n      return setDarkMode(true);\n    },\n    disable: function disable() {\n      return setDarkMode(false);\n    }\n  };\n}\n\nexport default useDarkMode;","map":{"version":3,"mappings":";AACA,SAASA,eAAT,QAAgC,oBAAhC;AAEA,SAASC,aAAT,QAA8B,kBAA9B;AAEA,SAASC,eAAT,QAAgC,oBAAhC;AAEA,IAAMC,kBAAkB,GAAG,8BAA3B;;AASA,SAASC,WAAT,CAAqBC,YAArB,EAA2C;AAAA;;AACzC,MAAMC,QAAQ,GAAGL,aAAa,CAACE,kBAAD,CAA9B;;AACA,yBAAkCH,eAAe,CAC/C,uBAD+C,UAE/CK,YAF+C,aAE/CA,YAF+C,cAE/CA,YAF+C,GAE/BC,QAF+B,uCAEnB,KAFmB,CAAjD;AAAA;AAAA,MAAOC,UAAP;AAAA,MAAmBC,WAAnB;;AAMAN,iBAAe,CAAC,YAAK;AACnBM,eAAW,CAACF,QAAD,CAAX;AAED,GAHc,EAGZ,CAACA,QAAD,CAHY,CAAf;AAKA,SAAO;AACLC,cAAU,EAAVA,UADK;AAELE,UAAM,EAAE;AAAA,aAAMD,WAAW,CAAC,cAAI;AAAA,eAAI,CAACE,IAAL;AAAA,OAAL,CAAjB;AAAA,KAFH;AAGLC,UAAM,EAAE;AAAA,aAAMH,WAAW,CAAC,IAAD,CAAjB;AAAA,KAHH;AAILI,WAAO,EAAE;AAAA,aAAMJ,WAAW,CAAC,KAAD,CAAjB;AAAA;AAJJ,GAAP;AAMD;;AAED,eAAeJ,WAAf","names":["useLocalStorage","useMediaQuery","useUpdateEffect","COLOR_SCHEME_QUERY","useDarkMode","defaultValue","isDarkOS","isDarkMode","setDarkMode","toggle","prev","enable","disable"],"sources":["/Users/mac/Documents/GitHub/inner-web/node_modules/usehooks-ts/src/useDarkMode/useDarkMode.ts"],"sourcesContent":["// See: https://usehooks-ts.com/react-hook/use-local-storage\nimport { useLocalStorage } from '../useLocalStorage'\n// See: https://usehooks-ts.com/react-hook/use-media-query\nimport { useMediaQuery } from '../useMediaQuery'\n// See: https://usehooks-ts.com/react-hook/use-update-effect\nimport { useUpdateEffect } from '../useUpdateEffect'\n\nconst COLOR_SCHEME_QUERY = '(prefers-color-scheme: dark)'\n\ninterface UseDarkModeOutput {\n  isDarkMode: boolean\n  toggle: () => void\n  enable: () => void\n  disable: () => void\n}\n\nfunction useDarkMode(defaultValue?: boolean): UseDarkModeOutput {\n  const isDarkOS = useMediaQuery(COLOR_SCHEME_QUERY)\n  const [isDarkMode, setDarkMode] = useLocalStorage<boolean>(\n    'usehooks-ts-dark-mode',\n    defaultValue ?? isDarkOS ?? false,\n  )\n\n  // Update darkMode if os prefers changes\n  useUpdateEffect(() => {\n    setDarkMode(isDarkOS)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isDarkOS])\n\n  return {\n    isDarkMode,\n    toggle: () => setDarkMode(prev => !prev),\n    enable: () => setDarkMode(true),\n    disable: () => setDarkMode(false),\n  }\n}\n\nexport default useDarkMode\n"]},"metadata":{},"sourceType":"module"}