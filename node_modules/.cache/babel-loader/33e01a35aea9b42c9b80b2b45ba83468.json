{"ast":null,"code":"import _slicedToArray from \"/Users/mac/Documents/GitHub/inner-web/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useState } from 'react';\n\nfunction useCounter(initialValue) {\n  var _useState = useState(initialValue || 0),\n      _useState2 = _slicedToArray(_useState, 2),\n      count = _useState2[0],\n      setCount = _useState2[1];\n\n  var increment = function increment() {\n    return setCount(function (x) {\n      return x + 1;\n    });\n  };\n\n  var decrement = function decrement() {\n    return setCount(function (x) {\n      return x - 1;\n    });\n  };\n\n  var reset = function reset() {\n    return setCount(initialValue || 0);\n  };\n\n  return {\n    count: count,\n    increment: increment,\n    decrement: decrement,\n    reset: reset,\n    setCount: setCount\n  };\n}\n\nexport default useCounter;","map":{"version":3,"mappings":";AAAA,SAAmCA,QAAnC,QAAmD,OAAnD;;AAUA,SAASC,UAAT,CAAoBC,YAApB,EAAyC;AACvC,kBAA0BF,QAAQ,CAACE,YAAY,IAAI,CAAjB,CAAlC;AAAA;AAAA,MAAOC,KAAP;AAAA,MAAcC,QAAd;;AAEA,MAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA,WAAMD,QAAQ,CAAC,WAAC;AAAA,aAAIE,CAAC,GAAG,CAAR;AAAA,KAAF,CAAd;AAAA,GAAlB;;AACA,MAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA,WAAMH,QAAQ,CAAC,WAAC;AAAA,aAAIE,CAAC,GAAG,CAAR;AAAA,KAAF,CAAd;AAAA,GAAlB;;AACA,MAAME,KAAK,GAAG,SAARA,KAAQ;AAAA,WAAMJ,QAAQ,CAACF,YAAY,IAAI,CAAjB,CAAd;AAAA,GAAd;;AAEA,SAAO;AACLC,SAAK,EAALA,KADK;AAELE,aAAS,EAATA,SAFK;AAGLE,aAAS,EAATA,SAHK;AAILC,SAAK,EAALA,KAJK;AAKLJ,YAAQ,EAARA;AALK,GAAP;AAOD;;AAED,eAAeH,UAAf","names":["useState","useCounter","initialValue","count","setCount","increment","x","decrement","reset"],"sources":["/Users/mac/Documents/GitHub/inner-web/node_modules/usehooks-ts/src/useCounter/useCounter.ts"],"sourcesContent":["import { Dispatch, SetStateAction, useState } from 'react'\n\ninterface ReturnType {\n  count: number\n  increment: () => void\n  decrement: () => void\n  reset: () => void\n  setCount: Dispatch<SetStateAction<number>>\n}\n\nfunction useCounter(initialValue?: number): ReturnType {\n  const [count, setCount] = useState(initialValue || 0)\n\n  const increment = () => setCount(x => x + 1)\n  const decrement = () => setCount(x => x - 1)\n  const reset = () => setCount(initialValue || 0)\n\n  return {\n    count,\n    increment,\n    decrement,\n    reset,\n    setCount,\n  }\n}\n\nexport default useCounter\n"]},"metadata":{},"sourceType":"module"}