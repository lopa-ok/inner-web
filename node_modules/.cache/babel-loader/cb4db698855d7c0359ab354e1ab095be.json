{"ast":null,"code":"import _asyncToGenerator from \"/Users/mac/Documents/GitHub/inner-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"/Users/mac/Documents/GitHub/inner-web/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _regeneratorRuntime from \"/Users/mac/Documents/GitHub/inner-web/node_modules/@babel/runtime/regenerator/index.js\";\nimport { useState } from 'react';\n\nfunction useCopyToClipboard() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      copiedText = _useState2[0],\n      setCopiedText = _useState2[1];\n\n  var copy = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(text) {\n      var _navigator;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if ((_navigator = navigator) !== null && _navigator !== void 0 && _navigator.clipboard) {\n                _context.next = 3;\n                break;\n              }\n\n              console.warn('Clipboard not supported');\n              return _context.abrupt(\"return\", false);\n\n            case 3:\n              _context.prev = 3;\n              _context.next = 6;\n              return navigator.clipboard.writeText(text);\n\n            case 6:\n              setCopiedText(text);\n              return _context.abrupt(\"return\", true);\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](3);\n              console.warn('Copy failed', _context.t0);\n              setCopiedText(null);\n              return _context.abrupt(\"return\", false);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 10]]);\n    }));\n\n    return function copy(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return [copiedText, copy];\n}\n\nexport default useCopyToClipboard;","map":{"version":3,"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAKA,SAASC,kBAAT,GAA2B;AACzB,kBAAoCD,QAAQ,CAAc,IAAd,CAA5C;AAAA;AAAA,MAAOE,UAAP;AAAA,MAAmBC,aAAnB;;AAEA,MAAMC,IAAI;AAAA,wEAAW,iBAAMC,IAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,gCACdC,SADc,uCACd,WAAWC,SADG;AAAA;AAAA;AAAA;;AAEjBC,qBAAO,CAACC,IAAR,CAAa,yBAAb;AAFiB,+CAGV,KAHU;;AAAA;AAAA;AAAA;AAAA,qBAQXH,SAAS,CAACC,SAAV,CAAoBG,SAApB,CAA8BL,IAA9B,CARW;;AAAA;AASjBF,2BAAa,CAACE,IAAD,CAAb;AATiB,+CAUV,IAVU;;AAAA;AAAA;AAAA;AAYjBG,qBAAO,CAACC,IAAR,CAAa,aAAb;AACAN,2BAAa,CAAC,IAAD,CAAb;AAbiB,+CAcV,KAdU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAX;;AAAA,oBAAJC,IAAI;AAAA;AAAA;AAAA,KAAV;;AAkBA,SAAO,CAACF,UAAD,EAAaE,IAAb,CAAP;AACD;;AAED,eAAeH,kBAAf","names":["useState","useCopyToClipboard","copiedText","setCopiedText","copy","text","navigator","clipboard","console","warn","writeText"],"sources":["/Users/mac/Documents/GitHub/inner-web/node_modules/usehooks-ts/src/useCopyToClipboard/useCopyToClipboard.ts"],"sourcesContent":["import { useState } from 'react'\n\ntype CopiedValue = string | null\ntype CopyFn = (text: string) => Promise<boolean> // Return success\n\nfunction useCopyToClipboard(): [CopiedValue, CopyFn] {\n  const [copiedText, setCopiedText] = useState<CopiedValue>(null)\n\n  const copy: CopyFn = async text => {\n    if (!navigator?.clipboard) {\n      console.warn('Clipboard not supported')\n      return false\n    }\n\n    // Try to save to clipboard then save it in the state if worked\n    try {\n      await navigator.clipboard.writeText(text)\n      setCopiedText(text)\n      return true\n    } catch (error) {\n      console.warn('Copy failed', error)\n      setCopiedText(null)\n      return false\n    }\n  }\n\n  return [copiedText, copy]\n}\n\nexport default useCopyToClipboard\n"]},"metadata":{},"sourceType":"module"}