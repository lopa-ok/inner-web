{"ast":null,"code":"import _slicedToArray from \"/Users/mac/Documents/GitHub/inner-web/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useCallback, useState } from 'react';\n\nfunction useBoolean(defaultValue) {\n  var _useState = useState(!!defaultValue),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var setTrue = useCallback(function () {\n    return setValue(true);\n  }, []);\n  var setFalse = useCallback(function () {\n    return setValue(false);\n  }, []);\n  var toggle = useCallback(function () {\n    return setValue(function (x) {\n      return !x;\n    });\n  }, []);\n  return {\n    value: value,\n    setValue: setValue,\n    setTrue: setTrue,\n    setFalse: setFalse,\n    toggle: toggle\n  };\n}\n\nexport default useBoolean;","map":{"version":3,"mappings":";AAAA,SAAmCA,WAAnC,EAAgDC,QAAhD,QAAgE,OAAhE;;AAUA,SAASC,UAAT,CAAoBC,YAApB,EAA0C;AACxC,kBAA0BF,QAAQ,CAAC,CAAC,CAACE,YAAH,CAAlC;AAAA;AAAA,MAAOC,KAAP;AAAA,MAAcC,QAAd;;AAEA,MAAMC,OAAO,GAAGN,WAAW,CAAC;AAAA,WAAMK,QAAQ,CAAC,IAAD,CAAd;AAAA,GAAD,EAAuB,EAAvB,CAA3B;AACA,MAAME,QAAQ,GAAGP,WAAW,CAAC;AAAA,WAAMK,QAAQ,CAAC,KAAD,CAAd;AAAA,GAAD,EAAwB,EAAxB,CAA5B;AACA,MAAMG,MAAM,GAAGR,WAAW,CAAC;AAAA,WAAMK,QAAQ,CAAC,WAAC;AAAA,aAAI,CAACI,CAAL;AAAA,KAAF,CAAd;AAAA,GAAD,EAA0B,EAA1B,CAA1B;AAEA,SAAO;AAAEL,SAAK,EAALA,KAAF;AAASC,YAAQ,EAARA,QAAT;AAAmBC,WAAO,EAAPA,OAAnB;AAA4BC,YAAQ,EAARA,QAA5B;AAAsCC,UAAM,EAANA;AAAtC,GAAP;AACD;;AAED,eAAeN,UAAf","names":["useCallback","useState","useBoolean","defaultValue","value","setValue","setTrue","setFalse","toggle","x"],"sources":["/Users/mac/Documents/GitHub/inner-web/node_modules/usehooks-ts/src/useBoolean/useBoolean.ts"],"sourcesContent":["import { Dispatch, SetStateAction, useCallback, useState } from 'react'\n\ninterface ReturnType {\n  value: boolean\n  setValue: Dispatch<SetStateAction<boolean>>\n  setTrue: () => void\n  setFalse: () => void\n  toggle: () => void\n}\n\nfunction useBoolean(defaultValue?: boolean): ReturnType {\n  const [value, setValue] = useState(!!defaultValue)\n\n  const setTrue = useCallback(() => setValue(true), [])\n  const setFalse = useCallback(() => setValue(false), [])\n  const toggle = useCallback(() => setValue(x => !x), [])\n\n  return { value, setValue, setTrue, setFalse, toggle }\n}\n\nexport default useBoolean\n"]},"metadata":{},"sourceType":"module"}