{"ast":null,"code":"import _slicedToArray from \"/Users/mac/Documents/GitHub/inner-web/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useEffect, useState } from 'react';\n\nfunction useIntersectionObserver(elementRef, _ref) {\n  var _ref$threshold = _ref.threshold,\n      threshold = _ref$threshold === void 0 ? 0 : _ref$threshold,\n      _ref$root = _ref.root,\n      root = _ref$root === void 0 ? null : _ref$root,\n      _ref$rootMargin = _ref.rootMargin,\n      rootMargin = _ref$rootMargin === void 0 ? '0%' : _ref$rootMargin,\n      _ref$freezeOnceVisibl = _ref.freezeOnceVisible,\n      freezeOnceVisible = _ref$freezeOnceVisibl === void 0 ? false : _ref$freezeOnceVisibl;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      entry = _useState2[0],\n      setEntry = _useState2[1];\n\n  var frozen = (entry === null || entry === void 0 ? void 0 : entry.isIntersecting) && freezeOnceVisible;\n\n  var updateEntry = function updateEntry(_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 1),\n        entry = _ref3[0];\n\n    setEntry(entry);\n  };\n\n  useEffect(function () {\n    var node = elementRef === null || elementRef === void 0 ? void 0 : elementRef.current;\n    var hasIOSupport = !!window.IntersectionObserver;\n    if (!hasIOSupport || frozen || !node) return;\n    var observerParams = {\n      threshold: threshold,\n      root: root,\n      rootMargin: rootMargin\n    };\n    var observer = new IntersectionObserver(updateEntry, observerParams);\n    observer.observe(node);\n    return function () {\n      return observer.disconnect();\n    };\n  }, [elementRef, JSON.stringify(threshold), root, rootMargin, frozen]);\n  return entry;\n}\n\nexport default useIntersectionObserver;","map":{"version":3,"mappings":";AAAA,SAAoBA,SAApB,EAA+BC,QAA/B,QAA+C,OAA/C;;AAMA,SAASC,uBAAT,CACEC,UADF,QAOS;AAAA,4BAJLC,SAIK;AAAA,MAJLA,SAIK,+BAJO,CAIP;AAAA,uBAHLC,IAGK;AAAA,MAHLA,IAGK,0BAHE,IAGF;AAAA,6BAFLC,UAEK;AAAA,MAFLA,UAEK,gCAFQ,IAER;AAAA,mCADLC,iBACK;AAAA,MADLA,iBACK,sCADe,KACf;;AAEP,kBAA0BN,QAAQ,EAAlC;AAAA;AAAA,MAAOO,KAAP;AAAA,MAAcC,QAAd;;AAEA,MAAMC,MAAM,GAAG,MAAK,SAAL,SAAK,WAAL,iBAAK,CAAEC,cAAP,KAAyBJ,iBAAxC;;AAEA,MAAMK,WAAW,GAAG,SAAdA,WAAc,QAA+C;AAAA;AAAA,QAA7CJ,KAA6C;;AACjEC,YAAQ,CAACD,KAAD,CAAR;AACD,GAFD;;AAIAR,WAAS,CAAC,YAAK;AACb,QAAMa,IAAI,GAAGV,UAAH,aAAGA,UAAH,uBAAGA,UAAU,CAAEW,OAAzB;AACA,QAAMC,YAAY,GAAG,CAAC,CAACC,MAAM,CAACC,oBAA9B;AAEA,QAAI,CAACF,YAAD,IAAiBL,MAAjB,IAA2B,CAACG,IAAhC,EAAsC;AAEtC,QAAMK,cAAc,GAAG;AAAEd,eAAS,EAATA,SAAF;AAAaC,UAAI,EAAJA,IAAb;AAAmBC,gBAAU,EAAVA;AAAnB,KAAvB;AACA,QAAMa,QAAQ,GAAG,IAAIF,oBAAJ,CAAyBL,WAAzB,EAAsCM,cAAtC,CAAjB;AAEAC,YAAQ,CAACC,OAAT,CAAiBP,IAAjB;AAEA,WAAO;AAAA,aAAMM,QAAQ,CAACE,UAAT,EAAN;AAAA,KAAP;AAGD,GAdQ,EAcN,CAAClB,UAAD,EAAamB,IAAI,CAACC,SAAL,CAAenB,SAAf,CAAb,EAAwCC,IAAxC,EAA8CC,UAA9C,EAA0DI,MAA1D,CAdM,CAAT;AAgBA,SAAOF,KAAP;AACD;;AAED,eAAeN,uBAAf","names":["useEffect","useState","useIntersectionObserver","elementRef","threshold","root","rootMargin","freezeOnceVisible","entry","setEntry","frozen","isIntersecting","updateEntry","node","current","hasIOSupport","window","IntersectionObserver","observerParams","observer","observe","disconnect","JSON","stringify"],"sources":["/Users/mac/Documents/GitHub/inner-web/node_modules/usehooks-ts/src/useIntersectionObserver/useIntersectionObserver.ts"],"sourcesContent":["import { RefObject, useEffect, useState } from 'react'\n\ninterface Args extends IntersectionObserverInit {\n  freezeOnceVisible?: boolean\n}\n\nfunction useIntersectionObserver(\n  elementRef: RefObject<Element>,\n  {\n    threshold = 0,\n    root = null,\n    rootMargin = '0%',\n    freezeOnceVisible = false,\n  }: Args,\n): IntersectionObserverEntry | undefined {\n  const [entry, setEntry] = useState<IntersectionObserverEntry>()\n\n  const frozen = entry?.isIntersecting && freezeOnceVisible\n\n  const updateEntry = ([entry]: IntersectionObserverEntry[]): void => {\n    setEntry(entry)\n  }\n\n  useEffect(() => {\n    const node = elementRef?.current // DOM Ref\n    const hasIOSupport = !!window.IntersectionObserver\n\n    if (!hasIOSupport || frozen || !node) return\n\n    const observerParams = { threshold, root, rootMargin }\n    const observer = new IntersectionObserver(updateEntry, observerParams)\n\n    observer.observe(node)\n\n    return () => observer.disconnect()\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [elementRef, JSON.stringify(threshold), root, rootMargin, frozen])\n\n  return entry\n}\n\nexport default useIntersectionObserver\n"]},"metadata":{},"sourceType":"module"}