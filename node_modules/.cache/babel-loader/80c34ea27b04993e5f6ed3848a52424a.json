{"ast":null,"code":"import _slicedToArray from \"/Users/mac/Documents/GitHub/inner-web/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useEffect, useState } from 'react';\nimport { useLocalStorage } from '../useLocalStorage';\nimport { useMediaQuery } from '../useMediaQuery';\nimport { useUpdateEffect } from '../useUpdateEffect';\nvar COLOR_SCHEME_QUERY = '(prefers-color-scheme: dark)';\n\nfunction useTernaryDarkMode() {\n  var isDarkOS = useMediaQuery(COLOR_SCHEME_QUERY);\n\n  var _useLocalStorage = useLocalStorage('usehooks-ts-ternary-dark-mode', 'system'),\n      _useLocalStorage2 = _slicedToArray(_useLocalStorage, 2),\n      ternaryDarkMode = _useLocalStorage2[0],\n      setTernaryDarkMode = _useLocalStorage2[1];\n\n  var _useState = useState(isDarkOS),\n      _useState2 = _slicedToArray(_useState, 2),\n      isDarkMode = _useState2[0],\n      setDarkMode = _useState2[1];\n\n  useUpdateEffect(function () {\n    if (ternaryDarkMode === 'system') {\n      setDarkMode(isDarkOS);\n    }\n  }, [isDarkOS]);\n  useEffect(function () {\n    switch (ternaryDarkMode) {\n      case 'light':\n        setDarkMode(false);\n        break;\n\n      case 'system':\n        setDarkMode(isDarkOS);\n        break;\n\n      case 'dark':\n        setDarkMode(true);\n        break;\n    }\n  }, [ternaryDarkMode, isDarkOS]);\n\n  function toggleTernaryDarkMode() {\n    var toggleDict = {\n      light: 'system',\n      system: 'dark',\n      dark: 'light'\n    };\n    setTernaryDarkMode(function (prevMode) {\n      return toggleDict[prevMode];\n    });\n  }\n\n  return {\n    isDarkMode: isDarkMode,\n    ternaryDarkMode: ternaryDarkMode,\n    setTernaryDarkMode: setTernaryDarkMode,\n    toggleTernaryDarkMode: toggleTernaryDarkMode\n  };\n}\n\nexport default useTernaryDarkMode;","map":{"version":3,"mappings":";AAAA,SAAmCA,SAAnC,EAA8CC,QAA9C,QAA8D,OAA9D;AAGA,SAASC,eAAT,QAAgC,oBAAhC;AAEA,SAASC,aAAT,QAA8B,kBAA9B;AAEA,SAASC,eAAT,QAAgC,oBAAhC;AAEA,IAAMC,kBAAkB,GAAG,8BAA3B;;AAUA,SAASC,kBAAT,GAA2B;AACzB,MAAMC,QAAQ,GAAGJ,aAAa,CAACE,kBAAD,CAA9B;;AACA,yBACEH,eAAe,CAAkB,+BAAlB,EAAmD,QAAnD,CADjB;AAAA;AAAA,MAAOM,eAAP;AAAA,MAAwBC,kBAAxB;;AAEA,kBAAkCR,QAAQ,CAAUM,QAAV,CAA1C;AAAA;AAAA,MAAOG,UAAP;AAAA,MAAmBC,WAAnB;;AAGAP,iBAAe,CAAC,YAAK;AACnB,QAAII,eAAe,KAAK,QAAxB,EAAkC;AAChCG,iBAAW,CAACJ,QAAD,CAAX;AACD;AACF,GAJc,EAIZ,CAACA,QAAD,CAJY,CAAf;AAMAP,WAAS,CAAC,YAAK;AACb,YAAQQ,eAAR;AACE,WAAK,OAAL;AACEG,mBAAW,CAAC,KAAD,CAAX;AACA;;AACF,WAAK,QAAL;AACEA,mBAAW,CAACJ,QAAD,CAAX;AACA;;AACF,WAAK,MAAL;AACEI,mBAAW,CAAC,IAAD,CAAX;AACA;AATJ;AAWD,GAZQ,EAYN,CAACH,eAAD,EAAkBD,QAAlB,CAZM,CAAT;;AAcA,WAASK,qBAAT,GAA8B;AAC5B,QAAMC,UAAU,GAA6C;AAC3DC,WAAK,EAAE,QADoD;AAE3DC,YAAM,EAAE,MAFmD;AAG3DC,UAAI,EAAE;AAHqD,KAA7D;AAKAP,sBAAkB,CAAC,kBAAQ;AAAA,aAAII,UAAU,CAACI,QAAD,CAAd;AAAA,KAAT,CAAlB;AACD;;AAED,SAAO;AACLP,cAAU,EAAVA,UADK;AAELF,mBAAe,EAAfA,eAFK;AAGLC,sBAAkB,EAAlBA,kBAHK;AAILG,yBAAqB,EAArBA;AAJK,GAAP;AAMD;;AAED,eAAeN,kBAAf","names":["useEffect","useState","useLocalStorage","useMediaQuery","useUpdateEffect","COLOR_SCHEME_QUERY","useTernaryDarkMode","isDarkOS","ternaryDarkMode","setTernaryDarkMode","isDarkMode","setDarkMode","toggleTernaryDarkMode","toggleDict","light","system","dark","prevMode"],"sources":["/Users/mac/Documents/GitHub/inner-web/node_modules/usehooks-ts/src/useTernaryDarkMode/useTernaryDarkMode.ts"],"sourcesContent":["import { Dispatch, SetStateAction, useEffect, useState } from 'react'\n\n// See: https://usehooks-ts.com/react-hook/use-local-storage\nimport { useLocalStorage } from '../useLocalStorage'\n// See: https://usehooks-ts.com/react-hook/use-media-query\nimport { useMediaQuery } from '../useMediaQuery'\n// See: https://usehooks-ts.com/react-hook/use-media-query\nimport { useUpdateEffect } from '../useUpdateEffect'\n\nconst COLOR_SCHEME_QUERY = '(prefers-color-scheme: dark)'\n\ntype TernaryDarkMode = 'system' | 'dark' | 'light'\ninterface UseTernaryDarkModeOutput {\n  isDarkMode: boolean\n  ternaryDarkMode: TernaryDarkMode\n  setTernaryDarkMode: Dispatch<SetStateAction<TernaryDarkMode>>\n  toggleTernaryDarkMode: () => void\n}\n\nfunction useTernaryDarkMode(): UseTernaryDarkModeOutput {\n  const isDarkOS = useMediaQuery(COLOR_SCHEME_QUERY)\n  const [ternaryDarkMode, setTernaryDarkMode] =\n    useLocalStorage<TernaryDarkMode>('usehooks-ts-ternary-dark-mode', 'system')\n  const [isDarkMode, setDarkMode] = useState<boolean>(isDarkOS)\n\n  // Update darkMode if os prefers changes\n  useUpdateEffect(() => {\n    if (ternaryDarkMode === 'system') {\n      setDarkMode(isDarkOS)\n    }\n  }, [isDarkOS])\n\n  useEffect(() => {\n    switch (ternaryDarkMode) {\n      case 'light':\n        setDarkMode(false)\n        break\n      case 'system':\n        setDarkMode(isDarkOS)\n        break\n      case 'dark':\n        setDarkMode(true)\n        break\n    }\n  }, [ternaryDarkMode, isDarkOS])\n\n  function toggleTernaryDarkMode() {\n    const toggleDict: Record<TernaryDarkMode, TernaryDarkMode> = {\n      light: 'system',\n      system: 'dark',\n      dark: 'light',\n    }\n    setTernaryDarkMode(prevMode => toggleDict[prevMode])\n  }\n\n  return {\n    isDarkMode,\n    ternaryDarkMode,\n    setTernaryDarkMode,\n    toggleTernaryDarkMode,\n  }\n}\n\nexport default useTernaryDarkMode\n"]},"metadata":{},"sourceType":"module"}